import random
from aiogram.filters import CommandStart, Command
from aiogram import F, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from .tale_ai_function import *
from filter.chat_types import ChatTypeFilter

chat_bot_functions_private_router = Router()
chat_bot_functions_private_router.message.filter(ChatTypeFilter(['private']))


class SituationState(StatesGroup):
    question = State()
    text = State()


db_list = [
    {
        "id": 1,
        "text": "–í—ã –æ–ø–æ–∑–¥–∞–ª–∏ –Ω–∞ –≤–∞–∂–Ω—É—é –≤—Å—Ç—Ä–µ—á—É. –ö–∞–∫ –≤—ã –ø–æ—Å—Ç—É–ø–∏—Ç–µ: –∏–∑–≤–∏–Ω–∏—Ç–µ—Å—å –∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—ã –∏–ª–∏ –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç–µ—Å—å —Å–∫—Ä—ã—Ç—å –æ–ø–æ–∑–¥–∞–Ω–∏–µ?",
        "keywords": ["–æ–ø–æ–∑–¥–∞–Ω–∏–µ", "–∏–∑–≤–∏–Ω–µ–Ω–∏—è", "—á–µ—Å—Ç–Ω–æ—Å—Ç—å", "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"]
    },
    {
        "id": 2,
        "text": "–í—ã –Ω–∞—à–ª–∏ –∫–æ—à–µ–ª–µ–∫ —Å –¥–µ–Ω—å–≥–∞–º–∏ –Ω–∞ —É–ª–∏—Ü–µ. –ß—Ç–æ –≤—ã —Å–¥–µ–ª–∞–µ—Ç–µ: –æ—Å—Ç–∞–≤–∏—Ç–µ –µ–≥–æ —Å–µ–±–µ –∏–ª–∏ –æ—Ç–¥–∞–¥–∏—Ç–µ –≤ –ø–æ–ª–∏—Ü–∏—é?",
        "keywords": ["—á–µ—Å—Ç–Ω–æ—Å—Ç—å", "–¥–æ–±—Ä–æ–¥–µ—Ç–µ–ª—å", "–≤—ã–±–æ—Ä", "–ø–æ—Å—Ç—É–ø–æ–∫"]
    },
    {
        "id": 3,
        "text": "–í–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ —Ä–∞–±–æ—Ç—É —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π, –Ω–æ –æ–Ω–∞ –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ. –í—ã –≥–æ—Ç–æ–≤—ã –∫ –ø–µ—Ä–µ–µ–∑–¥—É –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ—Ç–µ –æ—Å—Ç–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º –º–µ—Å—Ç–µ?",
        "keywords": ["–∫–∞—Ä—å–µ—Ä–∞", "–ø–µ—Ä–µ–µ–∑–¥", "—Ä–∏—Å–∫–∏", "—Ä–∞–±–æ—Ç–∞"]
    },
    {
        "id": 4,
        "text": "–í–∞—à –ª—É—á—à–∏–π –¥—Ä—É–≥ –ø–æ–ø—Ä–æ—Å–∏–ª –≤–∞—Å –ø–æ–º–æ—á—å –µ–º—É —Å–∫—Ä—ã—Ç—å –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –µ–≥–æ –∫–∞—Ä—å–µ—Ä—É. –ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç–µ?",
        "keywords": ["–¥—Ä—É–∂–±–∞", "—á–µ—Å—Ç–Ω–æ—Å—Ç—å", "–ø–æ—Å—Ç—É–ø–æ–∫", "–≤—ã–±–æ—Ä"]
    },
    {
        "id": 5,
        "text": "–í–∞—à–∞ —Å–µ–º—å—è —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç—Å—è —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏. –ö–∞–∫ –≤—ã –±—É–¥–µ—Ç–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å: –≤–æ–∑—å–º–µ—Ç–µ –∫—Ä–µ–¥–∏—Ç –∏–ª–∏ –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç–µ—Å—å —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –±–µ–∑ –∑–∞–µ–º–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤?",
        "keywords": ["—Ñ–∏–Ω–∞–Ω—Å—ã", "–¥–æ–ª–≥", "—Å–µ–º—å—è", "–∫—Ä–µ–¥–∏—Ç"]
    },
    {
        "id": 6,
        "text": "–í–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç —Å—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º –≤ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –ö–∞–∫–∏–µ –ø—Ä–∏—á–∏–Ω—ã –±—É–¥—É—Ç –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω—ã, —á—Ç–æ–±—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è?",
        "keywords": ["–¥–æ–±—Ä–æ–≤–æ–ª—å—á–µ—Å—Ç–≤–æ", "–ø–æ–º–æ—â—å", "–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–ø—Ä–∏—á–∏–Ω—ã"]
    },
    {
        "id": 7,
        "text": "–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∞ –≤–µ—á–µ—Ä, –Ω–æ –≤—ã —É—Å—Ç–∞–ª–∏ –ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è. –ö–∞–∫ –≤—ã –ø–æ—Å—Ç—É–ø–∏—Ç–µ: –ø–æ–π–¥–µ—Ç–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –∏–ª–∏ –æ—Å—Ç–∞–Ω–µ—Ç–µ—Å—å –¥–æ–º–∞?",
        "keywords": ["—É—Å—Ç–∞–ª–æ—Å—Ç—å", "–æ–±—â–µ–Ω–∏–µ", "—Ä–µ—à–µ–Ω–∏–µ", "–≤—ã–±–æ—Ä"]
    },
    {
        "id": 8,
        "text": "–í—ã —Å—Ç–∞–ª–∏ —Å–≤–∏–¥–µ—Ç–µ–ª–µ–º –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–≥–æ –ø–æ—Å—Ç—É–ø–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ. –ö–∞–∫ –≤—ã –ø–æ—Å—Ç—É–ø–∏—Ç–µ: –≤–º–µ—à–∞–µ—Ç–µ—Å—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç–µ –≤—Å–µ –∫–∞–∫ –µ—Å—Ç—å?",
        "keywords": ["–Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å", "—Ä–µ—à–µ–Ω–∏–µ", "—Ä–∞–±–æ—Ç–∞", "–ø–æ—Å—Ç—É–ø–æ–∫"]
    },
    {
        "id": 9,
        "text": "–í–∞—à –∫–æ–ª–ª–µ–≥–∞ –ø–æ–ø—Ä–æ—Å–∏–ª –≤–∞—Å –æ–¥–æ–ª–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏, –Ω–æ –≤—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –æ–Ω –≤–µ—Ä–Ω–µ—Ç –¥–æ–ª–≥. –ß—Ç–æ –≤—ã —Ä–µ—à–∏—Ç–µ?",
        "keywords": ["—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–º–æ—â—å", "–¥–æ–ª–≥", "–¥—Ä—É–∂–±–∞", "—Ä–∏—Å–∫–∏"]
    },
    {
        "id": 10,
        "text": "–í—ã —É–∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –≤–∞—à –∑–Ω–∞–∫–æ–º—ã–π –æ–∫–∞–∑–∞–ª—Å—è –≤ —Å–ª–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏. –ö–∞–∫ –≤—ã –ø–æ—Å—Ç—É–ø–∏—Ç–µ: –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ø–æ–º–æ—â—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç–µ –≤—Å–µ –∫–∞–∫ –µ—Å—Ç—å?",
        "keywords": ["–¥—Ä—É–∂–±–∞", "–ø–æ–º–æ—â—å", "–≤—ã–±–æ—Ä", "—Ä–µ–∞–∫—Ü–∏—è"]
    }
]


@chat_bot_functions_private_router.message(Command("start_chat_bot"))
async def start_chat_bot(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ç–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö. –ù–∞–ø–∏—à–∏ /situation, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.")


@chat_bot_functions_private_router.callback_query(F.data.startswith('chat_bot'))
async def chat_bot_callback(query: types.CallbackQuery):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='start'))
    await query.message.edit_caption(
        caption="–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ç–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö. –ù–∞–ø–∏—à–∏ /situation, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å "
                "–Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.",
        reply_markup=keyboard.as_markup(), )


@chat_bot_functions_private_router.message(Command("situation"))
async def situation_(message: types.Message, state: FSMContext):
    situation = random.choice(db_list)
    question = situation['text']
    await message.reply(question)
    await state.update_data(question=question, keywords=situation['keywords'])
    await state.set_state(SituationState.text)


@chat_bot_functions_private_router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_chat_bot(message: types.Message, state: FSMContext):
    await state.clear()
    await message.reply("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω. –ù–∞–ø–∏—à–∏ /situation, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")


# Processing the user's answer
@chat_bot_functions_private_router.message(SituationState.text)
async def text_processing(message: types.Message, state: FSMContext):
    if message.text:
        data = await state.get_data()
        question = data['question']
        keywords = data['keywords']
        student_answer = message.text.lower()

        result = check_answer_get_response(question, keywords, student_answer)

        await message.reply(result)
        await state.clear()
        await message.reply("–ù–∞–ø–∏—à–∏ /situation, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.")
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å.")
